- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, formName = null, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= formName !== null ? formName : propertyName
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)
    


mixin select(entity, propertyName, taskKey, formName)
  - classLine = 'form-select'
  - inputId = getInputId(propertyName)
  - selectName = getInputName(taskKey)
  .input-group.mb-3
    label.input-group-text(
      for= inputId
    )= formName
    select(id= inputId class=classLine name=selectName)
      option(selected='')
      for el in entity
        option(
          value= _.get(el, 'id', '')
        )= _.get(el, propertyName, '')
